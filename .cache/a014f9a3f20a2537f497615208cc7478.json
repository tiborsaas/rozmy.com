{"dependencies":[{"name":"c:\\dev\\www\\rozmy.com\\node_modules\\normalize-path-scale\\package.json","includedInParent":true,"mtime":1522511390256},{"name":"bound-points","loc":{"line":1,"column":24}},{"name":"unlerp","loc":{"line":2,"column":21}}],"generated":{"js":"var getBounds = require('bound-points')\nvar unlerp = require('unlerp')\n\nmodule.exports = normalizePathScale\nfunction normalizePathScale (positions, bounds) {\n  if (!Array.isArray(positions)) {\n    throw new TypeError('must specify positions as first argument')\n  }\n  if (!Array.isArray(bounds)) {\n    bounds = getBounds(positions)\n  }\n\n  var min = bounds[0]\n  var max = bounds[1]\n\n  var width = max[0] - min[0]\n  var height = max[1] - min[1]\n\n  var aspectX = width > height ? 1 : (height / width)\n  var aspectY = width > height ? (width / height) : 1\n\n  if (max[0] - min[0] === 0 || max[1] - min[1] === 0) {\n    return positions // div by zero; leave positions unchanged\n  }\n\n  for (var i = 0; i < positions.length; i++) {\n    var pos = positions[i]\n    pos[0] = (unlerp(min[0], max[0], pos[0]) * 2 - 1) / aspectX\n    pos[1] = (unlerp(min[1], max[1], pos[1]) * 2 - 1) / aspectY\n  }\n  return positions\n}","map":{"mappings":[{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"rozmy.com\\node_modules\\normalize-path-scale\\index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}}],"sources":{"rozmy.com\\node_modules\\normalize-path-scale\\index.js":"var getBounds = require('bound-points')\nvar unlerp = require('unlerp')\n\nmodule.exports = normalizePathScale\nfunction normalizePathScale (positions, bounds) {\n  if (!Array.isArray(positions)) {\n    throw new TypeError('must specify positions as first argument')\n  }\n  if (!Array.isArray(bounds)) {\n    bounds = getBounds(positions)\n  }\n\n  var min = bounds[0]\n  var max = bounds[1]\n\n  var width = max[0] - min[0]\n  var height = max[1] - min[1]\n\n  var aspectX = width > height ? 1 : (height / width)\n  var aspectY = width > height ? (width / height) : 1\n\n  if (max[0] - min[0] === 0 || max[1] - min[1] === 0) {\n    return positions // div by zero; leave positions unchanged\n  }\n\n  for (var i = 0; i < positions.length; i++) {\n    var pos = positions[i]\n    pos[0] = (unlerp(min[0], max[0], pos[0]) * 2 - 1) / aspectX\n    pos[1] = (unlerp(min[1], max[1], pos[1]) * 2 - 1) / aspectY\n  }\n  return positions\n}"},"lineCount":32}},"hash":"c99bdff486ac76b06b654bb5369a74eb","cacheData":{"env":{}}}